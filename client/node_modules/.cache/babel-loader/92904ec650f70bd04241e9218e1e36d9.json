{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReactCustomGoogleAutocomplete = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ReactGoogleAutocomplete = function (_React$Component) {\n  _inherits(ReactGoogleAutocomplete, _React$Component);\n\n  function ReactGoogleAutocomplete(props) {\n    _classCallCheck(this, ReactGoogleAutocomplete);\n\n    var _this = _possibleConstructorReturn(this, (ReactGoogleAutocomplete.__proto__ || Object.getPrototypeOf(ReactGoogleAutocomplete)).call(this, props));\n\n    _this.autocomplete = null;\n    _this.event = null;\n    return _this;\n  }\n\n  _createClass(ReactGoogleAutocomplete, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          _props$types = _props.types,\n          types = _props$types === undefined ? ['(cities)'] : _props$types,\n          componentRestrictions = _props.componentRestrictions,\n          bounds = _props.bounds;\n      var config = {\n        types: types,\n        bounds: bounds\n      };\n\n      if (componentRestrictions) {\n        config.componentRestrictions = componentRestrictions;\n      }\n\n      this.disableAutofill();\n      this.autocomplete = new google.maps.places.Autocomplete(this.refs.input, config);\n      this.event = this.autocomplete.addListener('place_changed', this.onSelected.bind(this));\n    }\n  }, {\n    key: 'disableAutofill',\n    value: function disableAutofill() {\n      var _this2 = this; // Autofill workaround adapted from https://stackoverflow.com/questions/29931712/chrome-autofill-covers-autocomplete-for-google-maps-api-v3/49161445#49161445\n\n\n      if (window.MutationObserver) {\n        var observerHack = new MutationObserver(function () {\n          observerHack.disconnect();\n\n          if (_this2.refs && _this2.refs.input) {\n            _this2.refs.input.autocomplete = 'disable-autofill';\n          }\n        });\n        observerHack.observe(this.refs.input, {\n          attributes: true,\n          attributeFilter: ['autocomplete']\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.event.remove();\n    }\n  }, {\n    key: 'onSelected',\n    value: function onSelected() {\n      if (this.props.onPlaceSelected) {\n        this.props.onPlaceSelected(this.autocomplete.getPlace());\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          onPlaceSelected = _props2.onPlaceSelected,\n          types = _props2.types,\n          componentRestrictions = _props2.componentRestrictions,\n          bounds = _props2.bounds,\n          rest = _objectWithoutProperties(_props2, ['onPlaceSelected', 'types', 'componentRestrictions', 'bounds']);\n\n      return _react2.default.createElement('input', _extends({\n        ref: 'input'\n      }, rest));\n    }\n  }]);\n\n  return ReactGoogleAutocomplete;\n}(_react2.default.Component);\n\nReactGoogleAutocomplete.propTypes = {\n  onPlaceSelected: _propTypes2.default.func,\n  types: _propTypes2.default.array,\n  componentRestrictions: _propTypes2.default.object,\n  bounds: _propTypes2.default.object\n};\nexports.default = ReactGoogleAutocomplete;\n\nvar ReactCustomGoogleAutocomplete = exports.ReactCustomGoogleAutocomplete = function (_React$Component2) {\n  _inherits(ReactCustomGoogleAutocomplete, _React$Component2);\n\n  function ReactCustomGoogleAutocomplete(props) {\n    _classCallCheck(this, ReactCustomGoogleAutocomplete);\n\n    var _this3 = _possibleConstructorReturn(this, (ReactCustomGoogleAutocomplete.__proto__ || Object.getPrototypeOf(ReactCustomGoogleAutocomplete)).call(this, props));\n\n    _this3.service = new google.maps.places.AutocompleteService();\n    return _this3;\n  }\n\n  _createClass(ReactCustomGoogleAutocomplete, [{\n    key: 'onChange',\n    value: function onChange(e) {\n      var _this4 = this;\n\n      var _props$types2 = this.props.types,\n          types = _props$types2 === undefined ? ['(cities)'] : _props$types2;\n\n      if (e.target.value) {\n        this.service.getPlacePredictions({\n          input: e.target.value,\n          types: types\n        }, function (predictions, status) {\n          if (status === 'OK' && predictions && predictions.length > 0) {\n            _this4.props.onOpen(predictions);\n\n            console.log(predictions);\n          } else {\n            _this4.props.onClose();\n          }\n        });\n      } else {\n        this.props.onClose();\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this5 = this;\n\n      if (this.props.input.value) {\n        this.placeService = new google.maps.places.PlacesService(this.refs.div);\n        this.placeService.getDetails({\n          placeId: this.props.input.value\n        }, function (e, status) {\n          if (status === 'OK') {\n            _this5.refs.input.value = e.formatted_address;\n          }\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this6 = this;\n\n      return _react2.default.createElement('div', null, _react2.default.cloneElement(this.props.input, _extends({}, this.props, {\n        ref: 'input',\n        onChange: function onChange(e) {\n          _this6.onChange(e);\n        }\n      })), _react2.default.createElement('div', {\n        ref: 'div'\n      }));\n    }\n  }]);\n\n  return ReactCustomGoogleAutocomplete;\n}(_react2.default.Component);\n\nReactCustomGoogleAutocomplete.propTypes = {\n  input: _propTypes2.default.node.isRequired,\n  onOpen: _propTypes2.default.func.isRequired,\n  onClose: _propTypes2.default.func.isRequired\n};","map":null,"metadata":{},"sourceType":"script"}